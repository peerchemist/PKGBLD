#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright 2016 Peerchemist
#
# This file is part of Peerbox project.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

__author__ = "Peerchemist"
__license__ = "GPL"
__version__ = "0.6.4"

import os, sys
import requests
import subprocess, sh
import argparse
import json
import platform
import getpass
from peercoin_rpc import Client
from datetime import timedelta
from datetime import datetime as dt

def system():
    '''parses system info'''

    def uptime():
        with open('/proc/uptime', 'r') as f:
            uptime_seconds = float(f.readline().split()[0])
            uptime_str = str(timedelta(seconds = uptime_seconds))

        return uptime_str

    def distr():
        return platform.linux_distribution()[0] + " " + platform.linux_distribution()[1]

    def temp():
        with open('/sys/class/thermal/thermal_zone0/temp', 'r') as temp:
            return(float(temp.readline().strip())/1000)

    mm = {
        'os': distr(),
        'uptime': uptime(),
        'avg_load': os.getloadavg()#,
        #'system_temperature': temp()
        }

    return mm

def hardware():
    '''parses hardware info'''

    r = {}

    def _platform():
        with open('/proc/cpuinfo') as cpuinfo:
            for line in cpuinfo:
                if line.startswith('Hardware'):
                    _hardware = line.split(':')[1].strip()
                    if _hardware == "BCM2708":
                        return "Raspberry Pi_1"
                    if _hardware == "BCM2709":
                        return "Raspberry Pi_2"

    def _serial():
        with open('/proc/cpuinfo') as cpuinfo:
            for line in cpuinfo:
                if line.startswith('Serial'):
                    ser = line.split(':')[1].strip()
                    return ser

    if _platform() != None:

        with open('/proc/cmdline', 'r') as cmdline:
            for i in cmdline.readline().split():
                if i.startswith('smsc95xx.macaddr'):
                    r['macc'] = str(i.split('=')[1])

        r["hardware"] = _platform()
        r["serial"] = _serial()
        return r

    else:
        return {"hardware": "Unknown",
                "serial": "Unknown",
                "macc": "Unknown"}

def is_running(since=False):
    '''checks if ppcoind is running'''

    def status_check(mode):
        '''check uptime of peercoin daemon'''
        try:
            status = sh.systemctl.status("{0}@{1}".format(mode, getpass.getuser())).encode("utf-8").split("\n  ")
            return status
        except sh.ErrorReturnCode_3:
            return None

    running = False
    status = None

    modes = ["ppcoind", "ppcoind-tor"]

    for mode in modes: ## try each in modes

        try:
            if sh.systemctl("is-active", "{0}@{1}".format(mode, getpass.getuser())).strip() == "active":
                running = True
                status = status_check(mode)

        except sh.ErrorReturnCode_3:
            pass

    if status:
        for i in status:
            if i.strip().startswith("Active:"):

                if "active (running)" in i:
                    since = i.split("since")[1].split(";")[1].split("\n")[0].strip()

    if running is not True:
        return False
    else:
        if status:
            return running, since
        else:
            return running

def exchange_rates():
    '''pull peercoin exchange rates from remote api'''

    url = "https://api.cryptonator.com/api/ticker/"
    try:
        usd = requests.get(url + "ppc-usd", timeout=3).json()["ticker"]["price"]
        btc = requests.get(url + "ppc-btc", timeout=3).json()["ticker"]["price"]
    except IOError:
        return {"error": "Unable to reach remote price API."}

    return {"usd": usd,
            "btc": btc
            }

def info(public=False):
    '''acts like just like ppcoind getinfo but on steroids'''

    from collections import OrderedDict

    i = node.getinfo()
    h = hardware()
    s = system()
    report = OrderedDict()

    report["ppc_version"] = i["version"]
    report["os"] = s["os"]
    report["hardware"] = h["hardware"]
    if (public == False and "Raspberry Pi" in h["hardware"]):
        report["serial"] = h["serial"]
        report["macc addr"] = h["macc"]
    report["uptime"] = s["uptime"]
    report["peercoin node running since"] = is_running(since=True)[1]
    report["average_load"] = s["avg_load"]

    if public == False:
        report["balance"] = i["balance"]
        if (int(report["balance"]) != 0 
            and exchange_rates() != None
            and i["testnet"] == False):
            report["value"] = {"BTC": report["balance"] * float(exchange_rates()["btc"]),
                              "USD": report["balance"] * float(exchange_rates()["usd"])
                              }
        report["stake"] = i["stake"]
        report["newmint"] = i["newmint"]

    if public == False:
        report["ip"] = i["ip"]
    report["connections"] = i["connections"]
    report["blocks"] = i["blocks"]
    report["moneysupply"] = i["moneysupply"]
    report["pos_difficulty"] = node.getdifficulty()["proof-of-stake"]
    report["pow_difficulty"] = node.getdifficulty()["proof-of-work"]

    if i["testnet"] == True:
        report["testnet"] = True

    report["protocolversion"] = i["protocolversion"]
    report["walletversion"] = i["walletversion"]
    if i["errors"]:
        report["errors"] = i["errors"]

    return report

def gauth_set():
    subprocess.call(["/usr/bin/google-authenticator", 
                    "--force", "-t", "-d", "--rate-limit=3", 
                    "--rate-time=120", "--window-size=4", "--label=Peerbox"])
    sh.sudo("/usr/lib/pcf/set_gauth", "set")
    print("Google-authenticator is now enabled.")

def gauth_unset():
    sh.sudo("/usr/lib/pcf/set_gauth", "unset")
    print("Google-authenticator is now disabled.")

def health_check():
    '''compares local blockchain data with ppc.mintr.org as reference point'''

    def _remote():
        try:
            requests.packages.urllib3.disable_warnings()
            a = requests.get("https://peercoin.mintr.org/api/block/latest", timeout=3, verify=False).json()
            return {
                "height": int(a["height"]),
                "blockhash": a["blockhash"],
                "prev_block_hash": a["previousblockhash"],
                "merkleroot": a["merkleroot"]
            }
        except IOError as e:
            print("error: Can't reach remote API server!", e)
            raise

    def _local():
        local = {}
        local["height"] = int(node.getblockcount())
        local["blockhash"] = node.getblockhash(local["height"])
        block_info = node.getblock(local["blockhash"])
        
        local["prev_block_hash"] = block_info["previousblockhash"]
        local["merkleroot"] = block_info["merkleroot"]
        
        return local

    def _check():
        local = _local()
        remote = _remote()
        report = {}

        ## Block number
        if remote["height"] == local["height"]:
            report["block_count_matches"] = True
        else:
            report["block_count_matches"] = False

        ## Hash of the current block
        if remote["blockhash"] == local["blockhash"]:
            report["block_hash_matches"] = True
        else:
            report["block_hash_matches"] = False

        ## Hash of previous block
        if remote["prev_block_hash"] == local["prev_block_hash"]:
            report["previous_block_hash_matches"] = True
        else:
            report["previous_block_hash_matches"] = False

        ## hash of the MerkleRoot
        if remote["merkleroot"] == local["merkleroot"]:
            report["merkle_root_matches"] = True
        else:
            report["merkle_root_matches"] = False

        return report

    print("\nChecking if we are on the right chain...")
    print("Using peercoin.mintr.org as reference.\n")

    r = _check()
    for k, v in r.items():
        if v == True:
            print(k + ":" + " True")
        else:
            print(k + ":" + " False")

def mint():
    passwd = raw_input("Please enter your wallet password: ")
    print("Unlocking wallet for minting only.")
    try:
        node.walletpassphrase(passwd)
    except ValueError:
        return

def balance():
    '''prints out wallet balance'''
    return { 'balance': node.getbalance() }

def addr():
    '''prints out all Peercoin addresses associated with this wallet.'''
    return node.listreceivedbyaddress()

def send(address, amount, comment=""):
    '''send Peercoin to some address'''
    return node.sendtoaddress(str(address), int(amount), str(comment))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Show information on Peerbox.')
    parser.add_argument("-version", help="print Peerbox version.", action="store_true")
    parser.add_argument("-info", help='''equal to "ppcoind getinfo" with some extras''', action="store_true")
    parser.add_argument("-balance", help="print balance", action="store_true")
    parser.add_argument("-public", help="show info with omitted private data", action="store_true")
    parser.add_argument("-stdout", help="dump data to stdout, use to pipe to some other program", action="store_true")
    parser.add_argument('-health', help="compare local blockchain data with ppc.blockr.io as reference", action="store_true")
    parser.add_argument("-rates", help="current average PPC exchange rates in USD and BTC", action="store_true")
    parser.add_argument("-start", help="start Peerbox", action="store_true")
    parser.add_argument("-stop", help="stop Peerbox", action="store_true")
    parser.add_argument("-autostart", help="make Peerbox autostart at boot time", nargs='?', action='append')
    parser.add_argument("-tor", help="start Peerbox with Tor", action="store_true")
    parser.add_argument("-onion", help="show .onion address if node has one", action="store_true")
    parser.add_argument("-restart", help="restart Peerbox", action="store_true")
    parser.add_argument("-mint", help="unlock Peercoin wallet for minting.", action="store_true")
    parser.add_argument("-addr", help="shows all associated addresses.", action="store_true")
    parser.add_argument("-send", help="send Peercoins; -send ADDRESS AMOUNT", nargs="*")
    parser.add_argument("-gauth", help="enable or disable google-authenticator, use with 'set' or 'unset'", nargs='?', action='append')
    parser.add_argument("-testnet", help="switch to testnet", action="store_true")
    args = parser.parse_args()

if is_running() is False and not (args.start or args.tor):
    print('''Peerbox is not running. Please start Peerbox with "peerbox -start" ''')
    sys.exit()

if is_running() is False and args.start:
    print("Starting Peerbox...")
    sh.sudo("systemctl", "start", "ppcoind@{0}.service".format(getpass.getuser()))

if is_running() is False and args.tor:
    print("Starting Peerbox with Tor onion router as proxy...")
    sh.sudo("systemctl", "start", "ppcoind-tor@{0}.service".format(getpass.getuser()))

if is_running() is True and args.tor:
    print("Starting Peerbox with Tor onion router as proxy...")
    sh.sudo("systemctl", "start", "ppcoind-tor@{0}.service".format(getpass.getuser()))

'''
if args.testnet:
    if os.path.isdir("/var/lib/ppcoind"):
        if sh.sudo("systemctl", "is-active", "ppcoind-testnet") != "active":
            print("Starting Peerbox-testnet sandboxed node.")
            sh.sudo("systemctl", "start", "ppcoind-testnet.service")
        else:
            print("ppcoind-testnet service is already running.")
    else:
        print("Ppcoind-testnet not installed, install with 'sudo apt install ppcoind-testnet'.")
'''

if args.version:
    print(__version__)

if args.restart:
    if is_running():
        print("Restarting Peerbox...")
        try:
            sh.sudo("systemctl", "restart", "ppcoind@{0}.service".format(getpass.getuser()))
        except:
            sh.sudo("systemctl", "restart", "ppcoind-tor@{0}.service".format(getpass.getuser()))
    else:
        print("Peerbox is not running.")

if args.stop:
    if is_running():
        print("Stopping Peerbox...")
        try:
            sh.sudo("systemctl", "stop", "ppcoind@{0}.service".format(getpass.getuser()))
        except:
            sh.sudo("systemctl", "stop", "ppcoind-tor@{0}.service".format(getpass.getuser()))
    else:
        print("Peerbox is not running.")

if args.autostart:
    if args.autostart[0].lower() == "tor":
        sh.sudo("systemctl", "enable", "ppcoind-tor@{0}.service".format(getpass.getuser()))
        print("Peerbox Tor will now autostart at boot time.")
    else:
        sh.sudo("systemctl", "enable", "ppcoind@{0}.service".format(getpass.getuser()))
        print("Peerbox will now autostart at boot time.")

if args.onion:
    try:
        print(sh.sudo("cat", "/var/lib/tor/ppcoin-service/hostname"))
    except:
        pass

if args.gauth:
    if not args.gauth[0]:
        print("You must state the argument, 'set'/'true' or 'unset'/'false'.")
    if args.gauth[0] == ("set" or "true"):
        gauth_set()
    if args.gauth[0] == ("unset" or "false"):
        gauth_unset()
    if args.gauth[0] not in ("set", "unset", "true", "false", "status"):
        print("I really don't know what do you want me to do.")

### rpc dependent functions from here ###

if args.testnet:
    node = Client(testnet=True)
else:
    node = Client(testnet=False)

if args.info:
    if is_running() is False:
        print("Peerbox is not running, please start Peerbox first.")
    else:
        try:
            print(json.dumps(info(), indent=4))
        except:
            print("Peercoin deamon is still unresponsive, wait for few more seconds please.")

if args.public:
    print(json.dumps(info(public=True), indent=4))

if args.stdout:
    sys.stdout.write(info())

if args.health:
    health_check()

if args.rates:
    try:
        print(json.dumps(exchange_rates(), indent=4))
    except:
        print("Sorry, remote API could not be reached. Try again later.")
        pass

if args.mint:
    mint()

if args.balance:
    print(json.dumps(balance(), indent=4))

if args.addr:
    print(json.dumps(addr(), indent=4))

if args.send:
    print(send(args.send[0], args.send[1]))

if not any(vars(args).values()) == True:
    print(json.dumps(info(), indent=4))
